{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,wDAA2E;AAC3E,4EAAuE;AAEvE,yCAAyC;AACzC,uCAA8G;AAEjG,QAAA,mBAAmB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC/E,GAAG,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAC,CAAC;IACxD,MAAM,SAAS,GAAyB,UAAU,CAAC,IAAI,CAAC,2BAAmB,CAAyB,CAAC;IACrG,MAAM,QAAQ,GAAa,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;IAEpD,sCAAsC;IACtC,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,oBAAY,CAAC,CAAC;IACvD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;QAC9B,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC;YAC/B,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YAEjD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACzC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;YAC3C,CAAC;YACD,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CACnD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAC/C,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,6BAA6B;IAC7B,MAAM,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC;IACzC,MAAM,iBAAiB,GAAG,MAAM,yCAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjH,iBAAiB,CAAC,OAAO,EAAE,CAAC;IAE5B,oFAAoF;IACpF,UAAU,CAAC,IAAI,CAAC,eAAe,GAAG,iBAAiB,CAAC,EAAE,CAAC;IACvD,UAAU,CAAC,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC;IACpD,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,CAAC;IAEtD,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport { Transform, transformFromPromise } from '../../../brocc/transform';\nimport { compileSourceFiles } from '../../../ngc/compile-source-files';\nimport { TsConfig } from '../../../ts/tsconfig';\nimport * as log from '../../../util/log';\nimport { isEntryPointInProgress, isTypeScriptSources, TypeScriptSourceNode, isEntryPoint } from '../../nodes';\n\nexport const compileNgcTransform: Transform = transformFromPromise(async graph => {\n  log.info(`Compiling TypeScript sources through ngc`);\n  const entryPoint = graph.find(isEntryPointInProgress());\n  const tsSources: TypeScriptSourceNode = entryPoint.find(isTypeScriptSources) as TypeScriptSourceNode;\n  const tsConfig: TsConfig = entryPoint.data.tsConfig;\n\n  // Add paths mappings for dependencies\n  const entryPointDeps = entryPoint.filter(isEntryPoint);\n  if (entryPointDeps.length > 0) {\n    if (!tsConfig.options.paths) {\n      tsConfig.options.paths = {};\n    }\n\n    for (let dep of entryPointDeps) {\n      const depModuleId = dep.data.entryPoint.moduleId;\n\n      if (!tsConfig.options.paths[depModuleId]) {\n        tsConfig.options.paths[depModuleId] = [];\n      }\n      tsConfig.options.paths[depModuleId].push(path.resolve(\n        path.dirname(dep.data.es2015EntryFile),\n        path.basename(dep.data.es2015EntryFile, '.js')\n      ));\n    }\n  }\n\n  // Compile TypeScript sources\n  const previousTransform = tsSources.data;\n  const compilationResult = await compileSourceFiles(tsSources.data.transformed, tsConfig, entryPoint.data.outDir);\n  previousTransform.dispose();\n\n  // Store compilation result on the graph for further processing (`writeFlatBundles`)\n  entryPoint.data.es2015EntryFile = compilationResult.js;\n  entryPoint.data.typings = compilationResult.typings;\n  entryPoint.data.metadata = compilationResult.metadata;\n\n  return graph;\n});\n"]}